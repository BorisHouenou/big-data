[
["index.html", "Big Data with R - Exercise book", " Big Data with R - Exercise book This 2-day workshop covers how to analyze large amounts of data in R. We will focus on scaling up our analyses using the same dplyr verbs that we use in our everyday work. We will use dplyr with data.table, databases, and Spark. We will also cover best practices on visualizing, modeling, and sharing against these data sources. Where applicable, we will review recommended connection settings, security best practices, and deployment options. In this 2-day workshop, attendees will learn how to connect to and analyze large scale data "],
["introduction-to-vroom.html", "1 Introduction to vroom 1.1 vroom basics 1.2 Load multiple files 1.3 Load and modify multiple files", " 1 Introduction to vroom 1.1 vroom basics Load data into R using vroom Load the vroom() library library(vroom) Use the vroom() function to read the transactions_1.csv file from the files folder vroom(&quot;files/transactions_1.csv&quot;) ## Observations: 50,000 ## Variables: 14 ## chr [4]: customer_name, customer_phone, date_month_name, date_day ## dbl [9]: order_id, customer_id, customer_cc, customer_lon, customer_lat, date_year, date_month, product_id, price ## date [1]: date ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## # A tibble: 50,000 x 14 ## order_id customer_id customer_name customer_phone customer_cc customer_lon customer_lat date date_year date_month date_month_name date_day product_id price ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1001 36 Jeptha Ziemann 670.093.2858 8.70e17 -122. 37.7 2016-01-01 2016 1 Jan Friday 25 5.47 ## 2 1001 36 Jeptha Ziemann 670.093.2858 8.70e17 -122. 37.7 2016-01-01 2016 1 Jan Friday 25 5.47 ## 3 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 6 9.88 ## 4 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 14 8.05 ## 5 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 25 5.47 ## 6 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 29 5.95 ## 7 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 7 5.65 ## 8 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 8 6.5 ## 9 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 20 8.34 ## 10 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 22 5.09 ## # … with 49,990 more rows Use the id argument to add the file name to the data frame. Use file_name as the argument’s value vroom(&quot;files/transactions_1.csv&quot;, id = &quot;file_name&quot;) ## Observations: 50,000 ## Variables: 15 ## chr [4]: customer_name, customer_phone, date_month_name, date_day ## dbl [9]: order_id, customer_id, customer_cc, customer_lon, customer_lat, date_year, date_month, product_id, price ## date [1]: date ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## # A tibble: 50,000 x 15 ## file_name order_id customer_id customer_name customer_phone customer_cc customer_lon customer_lat date date_year date_month date_month_name date_day product_id price ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 files/transactions_1.csv 1001 36 Jeptha Ziemann 670.093.2858 8.70e17 -122. 37.7 2016-01-01 2016 1 Jan Friday 25 5.47 ## 2 files/transactions_1.csv 1001 36 Jeptha Ziemann 670.093.2858 8.70e17 -122. 37.7 2016-01-01 2016 1 Jan Friday 25 5.47 ## 3 files/transactions_1.csv 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 6 9.88 ## 4 files/transactions_1.csv 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 14 8.05 ## 5 files/transactions_1.csv 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 25 5.47 ## 6 files/transactions_1.csv 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 29 5.95 ## 7 files/transactions_1.csv 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 7 5.65 ## 8 files/transactions_1.csv 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 8 6.5 ## 9 files/transactions_1.csv 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 20 8.34 ## 10 files/transactions_1.csv 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 22 5.09 ## # … with 49,990 more rows Load the prior command into a variable called vr_transactions vr_transactions &lt;- vroom(&quot;files/transactions_1.csv&quot;, id = &quot;file_name&quot;) ## Observations: 50,000 ## Variables: 15 ## chr [4]: customer_name, customer_phone, date_month_name, date_day ## dbl [9]: order_id, customer_id, customer_cc, customer_lon, customer_lat, date_year, date_month, product_id, price ## date [1]: date ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message vr_transactions ## # A tibble: 50,000 x 15 ## file_name order_id customer_id customer_name customer_phone customer_cc customer_lon customer_lat date date_year date_month date_month_name date_day product_id price ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 files/transactions_1.csv 1001 36 Jeptha Ziemann 670.093.2858 8.70e17 -122. 37.7 2016-01-01 2016 1 Jan Friday 25 5.47 ## 2 files/transactions_1.csv 1001 36 Jeptha Ziemann 670.093.2858 8.70e17 -122. 37.7 2016-01-01 2016 1 Jan Friday 25 5.47 ## 3 files/transactions_1.csv 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 6 9.88 ## 4 files/transactions_1.csv 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 14 8.05 ## 5 files/transactions_1.csv 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 25 5.47 ## 6 files/transactions_1.csv 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 29 5.95 ## 7 files/transactions_1.csv 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 7 5.65 ## 8 files/transactions_1.csv 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 8 6.5 ## 9 files/transactions_1.csv 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 20 8.34 ## 10 files/transactions_1.csv 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 22 5.09 ## # … with 49,990 more rows Load the file spec into a variable called vr_spec, using the spec() command vr_spec &lt;- spec(vr_transactions) vr_spec ## cols( ## order_id = col_double(), ## customer_id = col_double(), ## customer_name = col_character(), ## customer_phone = col_character(), ## customer_cc = col_double(), ## customer_lon = col_double(), ## customer_lat = col_double(), ## date = col_date(format = &quot;&quot;), ## date_year = col_double(), ## date_month = col_double(), ## date_month_name = col_character(), ## date_day = col_character(), ## product_id = col_double(), ## price = col_double() ## ) 1.2 Load multiple files Load the fs and dplyr libraries library(fs) library(dplyr) List files in the files folder using the dir_ls() function dir_ls(&quot;files&quot;) ## files/transactions_1.csv files/transactions_2.csv files/transactions_3.csv files/transactions_4.csv files/transactions_5.csv In the dir_ls() function, use the glob argument to pass a wildcard to list CSV files only. Load to a variable named files files &lt;- dir_ls(&quot;files&quot;, glob = &quot;*.csv&quot;) Pass the files variable to vroom. Set the n_max argument to 1,000 to limit the data load for now vroom(files, n_max = 1000) ## Observations: 5,000 ## Variables: 14 ## chr [4]: customer_name, customer_phone, date_month_name, date_day ## dbl [9]: order_id, customer_id, customer_cc, customer_lon, customer_lat, date_year, date_month, product_id, price ## date [1]: date ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## # A tibble: 5,000 x 14 ## order_id customer_id customer_name customer_phone customer_cc customer_lon customer_lat date date_year date_month date_month_name date_day product_id price ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1001 36 Jeptha Ziemann 670.093.2858 8.70e17 -122. 37.7 2016-01-01 2016 1 Jan Friday 25 5.47 ## 2 1001 36 Jeptha Ziemann 670.093.2858 8.70e17 -122. 37.7 2016-01-01 2016 1 Jan Friday 25 5.47 ## 3 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 6 9.88 ## 4 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 14 8.05 ## 5 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 25 5.47 ## 6 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 29 5.95 ## 7 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 7 5.65 ## 8 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 8 6.5 ## 9 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 20 8.34 ## 10 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 22 5.09 ## # … with 4,990 more rows Add a col_types argument with vr_specs as its value vroom(files, n_max = 1000, col_types = vr_spec) ## # A tibble: 5,000 x 14 ## order_id customer_id customer_name customer_phone customer_cc customer_lon customer_lat date date_year date_month date_month_name date_day product_id price ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1001 36 Jeptha Ziemann 670.093.2858 8.70e17 -122. 37.7 2016-01-01 2016 1 Jan Friday 25 5.47 ## 2 1001 36 Jeptha Ziemann 670.093.2858 8.70e17 -122. 37.7 2016-01-01 2016 1 Jan Friday 25 5.47 ## 3 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 6 9.88 ## 4 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 14 8.05 ## 5 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 25 5.47 ## 6 1002 21 Miss Azzie Jaskolski (634)363-1830x7533 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 29 5.95 ## 7 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 7 5.65 ## 8 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 8 6.5 ## 9 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 20 8.34 ## 10 1003 64 Amber Harber 1-609-747-6670 6.01e18 -122. 37.8 2016-01-01 2016 1 Jan Friday 22 5.09 ## # … with 4,990 more rows Use the col_select argument to pass a list object containing the following variables: order_id, date, customer_name, and price vroom(files, n_max = 1000, col_types = vr_spec, col_select = list(order_id, date, customer_name, price) ) ## # A tibble: 5,000 x 4 ## order_id date customer_name price ## &lt;dbl&gt; &lt;date&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1001 2016-01-01 Jeptha Ziemann 5.47 ## 2 1001 2016-01-01 Jeptha Ziemann 5.47 ## 3 1002 2016-01-01 Miss Azzie Jaskolski 9.88 ## 4 1002 2016-01-01 Miss Azzie Jaskolski 8.05 ## 5 1002 2016-01-01 Miss Azzie Jaskolski 5.47 ## 6 1002 2016-01-01 Miss Azzie Jaskolski 5.95 ## 7 1003 2016-01-01 Amber Harber 5.65 ## 8 1003 2016-01-01 Amber Harber 6.5 ## 9 1003 2016-01-01 Amber Harber 8.34 ## 10 1003 2016-01-01 Amber Harber 5.09 ## # … with 4,990 more rows 1.3 Load and modify multiple files Files to large to have in memory, keep summarization Use a for() loop to print the content of each vector inside files for(i in seq_along(files)) { print(files[i]) } ## files/transactions_1.csv ## files/transactions_2.csv ## files/transactions_3.csv ## files/transactions_4.csv ## files/transactions_5.csv Switch the print() command with the vroom command, using the same arguments, except the file name. Use the files variable. Load the results into a variable called transactions. for(i in seq_along(files)) { transactions &lt;- vroom(files[i], n_max = 1000, col_types = vr_spec, col_select = list(order_id, date, customer_name, price)) } Group transactions by order_id and get the total of price and the number of records. Name them total_sales and no_items respectively. Name the new variable orders for(i in seq_along(files)) { transactions &lt;- vroom(files[i], n_max = 1000, col_types = vr_spec, col_select = list(order_id, date, customer_name, price)) orders &lt;- transactions %&gt;% group_by(order_id) %&gt;% summarise(total_sales = sum(price), no_items = n()) } Add a new variable called all_orders at the top. Set it to NULL. Add a bind_rows() step to orders, appending all_orders all_orders &lt;- NULL for(i in seq_along(files)) { transactions &lt;- vroom(files[i], n_max = 1000, col_types = vr_spec, col_select = list(order_id, date, customer_name, price)) orders &lt;- transactions %&gt;% group_by(order_id) %&gt;% summarise(total_sales = sum(price), no_items = n()) %&gt;% bind_rows(all_orders) } Remove the transactions variable at the end of each cycle all_orders &lt;- NULL for(i in seq_along(files)) { transactions &lt;- vroom(files[i], n_max = 1000, col_types = vr_spec, col_select = list(order_id, date, customer_name, price)) orders &lt;- transactions %&gt;% group_by(order_id) %&gt;% summarise(total_sales = sum(price), no_items = n()) %&gt;% bind_rows(all_orders) rm(transactions) } Preview the orders variable orders ## # A tibble: 337 x 3 ## order_id total_sales no_items ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 655497 15.8 2 ## 2 655498 8.29 1 ## 3 655499 12.1 2 ## 4 656500 14.0 2 ## 5 656501 20.8 3 ## 6 656502 10.6 2 ## 7 656503 8.29 1 ## 8 656504 6.7 1 ## 9 656505 33.7 5 ## 10 656506 17.3 3 ## # … with 327 more rows "],
["introduction-to-dtplyr.html", "2 Introduction to dtplyr 2.1 dtplyr basics 2.2 Object sizes 2.3 How dtplyr works 2.4 Working with dtplyr 2.5 Pivot data 2.6 The mutate() verb", " 2 Introduction to dtplyr 2.1 dtplyr basics Load data into R via data.table, and then wrap it with dtplyr Load the data.table, purrr and fs libraries library(data.table) library(purrr) library(fs) Read the transactions.csv file, from the files folder. Use the fread() function to load the data into a variable called transactions transactions &lt;- dir_ls(&quot;files&quot;, glob = &quot;*.csv&quot;) %&gt;% map(fread) %&gt;% rbindlist() Preview the data using str() str(transactions) ## Classes &#39;data.table&#39; and &#39;data.frame&#39;: 250000 obs. of 14 variables: ## $ order_id : int 1001 1001 1002 1002 1002 1002 1003 1003 1003 1003 ... ## $ customer_id : int 36 36 21 21 21 21 64 64 64 64 ... ## $ customer_name : chr &quot;Jeptha Ziemann&quot; &quot;Jeptha Ziemann&quot; &quot;Miss Azzie Jaskolski&quot; &quot;Miss Azzie Jaskolski&quot; ... ## $ customer_phone : chr &quot;670.093.2858&quot; &quot;670.093.2858&quot; &quot;(634)363-1830x7533&quot; &quot;(634)363-1830x7533&quot; ... ## $ customer_cc :integer64 869989038460747839 869989038460747839 6011469689707342998 6011469689707342998 6011469689707342998 6011469689707342998 6011829607227923753 6011829607227923753 ... ## $ customer_lon : num -122 -122 -122 -122 -122 ... ## $ customer_lat : num 37.7 37.7 37.8 37.8 37.8 ... ## $ date : chr &quot;2016-01-01&quot; &quot;2016-01-01&quot; &quot;2016-01-01&quot; &quot;2016-01-01&quot; ... ## $ date_year : int 2016 2016 2016 2016 2016 2016 2016 2016 2016 2016 ... ## $ date_month : int 1 1 1 1 1 1 1 1 1 1 ... ## $ date_month_name: chr &quot;Jan&quot; &quot;Jan&quot; &quot;Jan&quot; &quot;Jan&quot; ... ## $ date_day : chr &quot;Friday&quot; &quot;Friday&quot; &quot;Friday&quot; &quot;Friday&quot; ... ## $ product_id : int 25 25 6 14 25 29 7 8 20 22 ... ## $ price : num 5.47 5.47 9.88 8.05 5.47 5.95 5.65 6.5 8.34 5.09 ... ## - attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr&gt; Load the dplyr and dtplyr libraries library(dplyr) library(dtplyr) Use the lazy_dt() to “wrap” the transactions variable, into a new variable called dt_transactions dt_transactions &lt;- lazy_dt(transactions) View the dt_transactions variable’s structure with str() str(dt_transactions) ## List of 7 ## $ parent :Classes &#39;data.table&#39; and &#39;data.frame&#39;: 250000 obs. of 14 variables: ## ..$ order_id : int [1:250000] 1001 1001 1002 1002 1002 1002 1003 1003 1003 1003 ... ## ..$ customer_id : int [1:250000] 36 36 21 21 21 21 64 64 64 64 ... ## ..$ customer_name : chr [1:250000] &quot;Jeptha Ziemann&quot; &quot;Jeptha Ziemann&quot; &quot;Miss Azzie Jaskolski&quot; &quot;Miss Azzie Jaskolski&quot; ... ## ..$ customer_phone : chr [1:250000] &quot;670.093.2858&quot; &quot;670.093.2858&quot; &quot;(634)363-1830x7533&quot; &quot;(634)363-1830x7533&quot; ... ## ..$ customer_cc :integer64 [1:250000] 869989038460747839 869989038460747839 6011469689707342998 6011469689707342998 6011469689707342998 6011469689707342998 6011829607227923753 6011829607227923753 ... ## ..$ customer_lon : num [1:250000] -122 -122 -122 -122 -122 ... ## ..$ customer_lat : num [1:250000] 37.7 37.7 37.8 37.8 37.8 ... ## ..$ date : chr [1:250000] &quot;2016-01-01&quot; &quot;2016-01-01&quot; &quot;2016-01-01&quot; &quot;2016-01-01&quot; ... ## ..$ date_year : int [1:250000] 2016 2016 2016 2016 2016 2016 2016 2016 2016 2016 ... ## ..$ date_month : int [1:250000] 1 1 1 1 1 1 1 1 1 1 ... ## ..$ date_month_name: chr [1:250000] &quot;Jan&quot; &quot;Jan&quot; &quot;Jan&quot; &quot;Jan&quot; ... ## ..$ date_day : chr [1:250000] &quot;Friday&quot; &quot;Friday&quot; &quot;Friday&quot; &quot;Friday&quot; ... ## ..$ product_id : int [1:250000] 25 25 6 14 25 29 7 8 20 22 ... ## ..$ price : num [1:250000] 5.47 5.47 9.88 8.05 5.47 5.95 5.65 6.5 8.34 5.09 ... ## ..- attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr&gt; ## $ vars : chr [1:14] &quot;order_id&quot; &quot;customer_id&quot; &quot;customer_name&quot; &quot;customer_phone&quot; ... ## $ groups : chr(0) ## $ implicit_copy: logi FALSE ## $ needs_copy : logi FALSE ## $ env :&lt;environment: R_GlobalEnv&gt; ## $ name : symbol _DT1 ## - attr(*, &quot;class&quot;)= chr [1:2] &quot;dtplyr_step_first&quot; &quot;dtplyr_step&quot; 2.2 Object sizes Confirm that dtplyr is not making copies of the original data.table Load the lobstr library library(lobstr) Use obj_size() to obtain transactions’s size in memory obj_size(transactions) ## 23,069,208 B Use obj_size() to obtain dt_transactions’s size in memory obj_size(dt_transactions) ## 23,070,320 B Use obj_size() to obtain dt_transactions and transactions size in memory together obj_size(transactions, dt_transactions) ## 23,070,320 B 2.3 How dtplyr works Under the hood view of how dtplyr operates data.table objects Use dplyr verbs on top of dt_transactions to obtain the total sales by month dt_transactions %&gt;% group_by(date_month) %&gt;% summarise(total_sales = sum(price)) ## Source: local data table [?? x 2] ## Call: `_DT1`[, .(total_sales = sum(price)), keyby = .(date_month)] ## ## date_month total_sales ## &lt;int&gt; &lt;dbl&gt; ## 1 1 190662. ## 2 2 176576. ## 3 3 178563. ## 4 4 122322. ## 5 5 124623. ## 6 6 127250. ## ## # Use as.data.table()/as.data.frame()/as_tibble() to access results Load the above code into a variable called by_month by_month &lt;- dt_transactions %&gt;% group_by(date_month) %&gt;% summarise(total_sales = sum(price)) Use show_query() to see the data.table code that by_month actually runs show_query(by_month) ## `_DT1`[, .(total_sales = sum(price)), keyby = .(date_month)] Use str() to view how by_month, instead of modifying the data, it only adds steps that will later be operated by data.table str(by_month) ## List of 6 ## $ parent :List of 9 ## ..$ parent :List of 6 ## .. ..$ parent :List of 7 ## .. .. ..$ parent :Classes &#39;data.table&#39; and &#39;data.frame&#39;: 250000 obs. of 14 variables: ## .. .. .. ..$ order_id : int [1:250000] 1001 1001 1002 1002 1002 1002 1003 1003 1003 1003 ... ## .. .. .. ..$ customer_id : int [1:250000] 36 36 21 21 21 21 64 64 64 64 ... ## .. .. .. ..$ customer_name : chr [1:250000] &quot;Jeptha Ziemann&quot; &quot;Jeptha Ziemann&quot; &quot;Miss Azzie Jaskolski&quot; &quot;Miss Azzie Jaskolski&quot; ... ## .. .. .. ..$ customer_phone : chr [1:250000] &quot;670.093.2858&quot; &quot;670.093.2858&quot; &quot;(634)363-1830x7533&quot; &quot;(634)363-1830x7533&quot; ... ## .. .. .. ..$ customer_cc :integer64 [1:250000] 869989038460747839 869989038460747839 6011469689707342998 6011469689707342998 6011469689707342998 6011469689707342998 6011829607227923753 6011829607227923753 ... ## .. .. .. ..$ customer_lon : num [1:250000] -122 -122 -122 -122 -122 ... ## .. .. .. ..$ customer_lat : num [1:250000] 37.7 37.7 37.8 37.8 37.8 ... ## .. .. .. ..$ date : chr [1:250000] &quot;2016-01-01&quot; &quot;2016-01-01&quot; &quot;2016-01-01&quot; &quot;2016-01-01&quot; ... ## .. .. .. ..$ date_year : int [1:250000] 2016 2016 2016 2016 2016 2016 2016 2016 2016 2016 ... ## .. .. .. ..$ date_month : int [1:250000] 1 1 1 1 1 1 1 1 1 1 ... ## .. .. .. ..$ date_month_name: chr [1:250000] &quot;Jan&quot; &quot;Jan&quot; &quot;Jan&quot; &quot;Jan&quot; ... ## .. .. .. ..$ date_day : chr [1:250000] &quot;Friday&quot; &quot;Friday&quot; &quot;Friday&quot; &quot;Friday&quot; ... ## .. .. .. ..$ product_id : int [1:250000] 25 25 6 14 25 29 7 8 20 22 ... ## .. .. .. ..$ price : num [1:250000] 5.47 5.47 9.88 8.05 5.47 5.95 5.65 6.5 8.34 5.09 ... ## .. .. .. ..- attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr&gt; ## .. .. ..$ vars : chr [1:14] &quot;order_id&quot; &quot;customer_id&quot; &quot;customer_name&quot; &quot;customer_phone&quot; ... ## .. .. ..$ groups : chr(0) ## .. .. ..$ implicit_copy: logi FALSE ## .. .. ..$ needs_copy : logi FALSE ## .. .. ..$ env :&lt;environment: R_GlobalEnv&gt; ## .. .. ..$ name : symbol _DT1 ## .. .. ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;dtplyr_step_first&quot; &quot;dtplyr_step&quot; ## .. ..$ vars : chr [1:14] &quot;order_id&quot; &quot;customer_id&quot; &quot;customer_name&quot; &quot;customer_phone&quot; ... ## .. ..$ groups : chr &quot;date_month&quot; ## .. ..$ implicit_copy: logi FALSE ## .. ..$ needs_copy : logi FALSE ## .. ..$ env :&lt;environment: R_GlobalEnv&gt; ## .. ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;dtplyr_step_group&quot; &quot;dtplyr_step&quot; ## ..$ vars : chr [1:2] &quot;date_month&quot; &quot;total_sales&quot; ## ..$ groups : chr &quot;date_month&quot; ## ..$ implicit_copy: logi TRUE ## ..$ needs_copy : logi FALSE ## ..$ env :&lt;environment: R_GlobalEnv&gt; ## ..$ i : NULL ## ..$ j : language .(total_sales = sum(price)) ## ..$ on : chr(0) ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;dtplyr_step_subset&quot; &quot;dtplyr_step&quot; ## $ vars : chr [1:2] &quot;date_month&quot; &quot;total_sales&quot; ## $ groups : chr(0) ## $ implicit_copy: logi TRUE ## $ needs_copy : logi FALSE ## $ env :&lt;environment: R_GlobalEnv&gt; ## - attr(*, &quot;class&quot;)= chr [1:2] &quot;dtplyr_step_group&quot; &quot;dtplyr_step&quot; 2.4 Working with dtplyr Learn data conversion and basic visualization techniques Use as_tibble() to convert the results of by_month into a tibble by_month %&gt;% as_tibble() ## # A tibble: 12 x 2 ## date_month total_sales ## &lt;int&gt; &lt;dbl&gt; ## 1 1 190662. ## 2 2 176576. ## 3 3 178563. ## 4 4 122322. ## 5 5 124623. ## 6 6 127250. ## 7 7 124709. ## 8 8 127061. ## 9 9 123480. ## 10 10 129477. ## 11 11 121596. ## 12 12 129657. Load the ggplot2 library library(ggplot2) Use as_tibble() to convert before creating a line plot by_month %&gt;% as_tibble() %&gt;% ggplot() + geom_line(aes(date_month, total_sales)) 2.5 Pivot data Review a simple way to aggregate data faster, and then pivot it as a tibble Load the tidyr library library(tidyr) Group db_transactions by date_month and date_day, then aggregate price into total_sales dt_transactions %&gt;% group_by(date_month, date_day) %&gt;% summarise(total_sales = sum(price)) ## Source: local data table [?? x 3] ## Call: `_DT1`[, .(total_sales = sum(price)), keyby = .(date_month, date_day)] ## ## date_month date_day total_sales ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 Friday 26794. ## 2 1 Monday 27979. ## 3 1 Saturday 28784. ## 4 1 Sunday 28845. ## 5 1 Thursday 23130. ## 6 1 Tuesday 27982. ## ## # Use as.data.table()/as.data.frame()/as_tibble() to access results Copy the aggregation code above, then collect it into a tibble, and then use pivot_wider() to make the date_day the column headers. dt_transactions %&gt;% group_by(date_month, date_day) %&gt;% summarise(total_sales = sum(price)) %&gt;% as_tibble() %&gt;% pivot_wider(names_from = date_day, values_from = total_sales) ## # A tibble: 12 x 8 ## date_month Friday Monday Saturday Sunday Thursday Tuesday Wednesday ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 26794. 27979. 28784. 28845. 23130. 27982. 27148. ## 2 2 25563. 29165. 24096. 23912. 26444. 24098. 23299. ## 3 3 27397. 22200. 24656. 23597. 29247. 25391. 26074. ## 4 4 19018. 16856. 20020. 18899. 15820. 15464. 16246. ## 5 5 16041. 20272. 15213. 17462. 15842. 21911. 17882. ## 6 6 19265. 15604. 17439. 16459. 20383. 17516. 20582. ## 7 7 19046. 18848. 18914. 19808. 16089. 15179. 16825. ## 8 8 15997. 18127. 15788. 16653. 18651. 20516. 21329. ## 9 9 21518. 17148. 17977. 15869. 18397. 16733. 15838. ## 10 10 16034. 19202. 18308. 21106. 17453. 18968. 18406. ## 11 11 15873. 15581. 16836. 16673. 19718. 17894. 19021. ## 12 12 21329. 17214. 19855. 18481. 18616. 16098. 18064. 2.6 The mutate() verb See how dtplyr creates a copy of the original data.table object in order to make the mutate operation work the same as it does on dtplr Use mutate() and show_query() to see the copy() command being used dt_transactions %&gt;% mutate(new_field = price / 2) %&gt;% show_query() ## copy(`_DT1`)[, `:=`(new_field = price/2)] Use lazy_dt() with the immutable argument set to FALSE to avoid the copy lazy_dt(transactions, immutable = FALSE) %&gt;% mutate(new_field = price / 2) %&gt;% show_query() ## `_DT2`[, `:=`(new_field = price/2)] "],
["introduction-to-dbi.html", "3 Introduction to DBI 3.1 Local database basics 3.2 Options for writing tables 3.3 Database operations 3.4 knitr SQL engine", " 3 Introduction to DBI 3.1 Local database basics Connecting and adding data to a database Load the DBI package library(DBI) Use dbConnect() to open a Database connection con &lt;- dbConnect(RSQLite::SQLite(), &quot;mydatabase.sqlite&quot;) Use dbListTables() to view existing tables, there should be 0 tables dbListTables(con) ## character(0) Use dbWriteTable() to create a new table using mtcars data. Name it db_mtcars dbWriteTable(con, &quot;db_mtcars&quot;, mtcars) Use dbListTables() to view existing tables, it should return db_mtcars dbListTables(con) ## [1] &quot;db_mtcars&quot; Use dbGetQuery() to pass a SQL query to the database dbGetQuery(con, &quot;select * from db_mtcars&quot;) ## mpg cyl disp hp drat wt qsec vs am gear carb ## 1 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## 2 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## 3 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## 4 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## 5 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## 6 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## 7 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## 8 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## 9 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## 10 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## 11 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## 12 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 ## 13 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 ## 14 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## 15 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## 16 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## 17 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## 18 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## 19 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## 20 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## 21 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 ## 22 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## 23 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## 24 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## 25 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 ## 26 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## 27 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## 28 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## 29 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## 30 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 ## 31 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 ## 32 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 Close the database connection using dbDisconnect() dbDisconnect(con) 3.2 Options for writing tables Understand how certain arguments in dbWriteTable() work Use dbConnect() to open a Database connection again con &lt;- dbConnect(RSQLite::SQLite(), &quot;mydatabase.sqlite&quot;) Use dbWriteTable() to re-create the db_mtcars table using mtcars data dbWriteTable(con, &quot;db_mtcars&quot;, mtcars) ## Error: Table db_mtcars exists in database, and both overwrite and append are FALSE Use the append argument in dbWriteTable() to add the data in the db_mtcars table dbWriteTable(con, &quot;db_mtcars&quot;, mtcars, append = TRUE) Using dbGetQuery(), check the current record count of db_mtcars, pass the following query: “select count() from db_mtcars” dbGetQuery(con, &quot;select count() from db_mtcars&quot;) ## count() ## 1 64 Use the overwrite argument to dbWriteTable() to replace the data in the db_mtcars table dbWriteTable(con, &quot;db_mtcars&quot;, mtcars, overwrite = TRUE) Check the record count of db_mtcars again dbGetQuery(con, &quot;select count() from db_mtcars&quot;) ## count() ## 1 32 3.3 Database operations Understand how to use dbSendStatement() to modify the database Use dbSendStatement() to pass a SQL commands that deletes any automatic car form db_mtcars: “delete from db_mtcars where am = 1”. Load the command to a variable called rs rs &lt;- dbSendStatement(con, &quot;delete from db_mtcars where am = 1&quot;) Call the rs variable to view information about the results of the requeted change rs ## &lt;SQLiteResult&gt; ## SQL delete from db_mtcars where am = 1 ## ROWS Fetched: 0 [complete] ## Changed: 13 Use dbHasCompleted() to confirm that the job is complete dbHasCompleted(rs) ## [1] TRUE Use dbGetRowsAffected() to see the number of rows that were affected by the request dbGetRowsAffected(rs) ## [1] 13 Clear the results using dbClearResult() dbClearResult(rs) Confirm that the result set has been removed by calling the rs variable once more rs ## &lt;SQLiteResult&gt; ## EXPIRED Check the record count of db_mtcars again, the new count should be 19 (32 original records - 13 deleted records) dbGetQuery(con, &quot;select count() from db_mtcars&quot;) ## count() ## 1 19 3.4 knitr SQL engine See how to run SQL queries as code chunks Start a new code chunk, but using sql instead of r as the first argument of the chunk. Also add connection=con as another argument of the chunk. ```{sql, connection=con} select * from db_mtcars ``` Table 3.1: Displaying records 1 - 10 mpg cyl disp hp drat wt qsec vs am gear carb 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 Add the max.print options to the chunk, and set it to 5 ```{sql, connection=con, max.print = 5} select * from db_mtcars ``` Table 3.2: Displaying records 1 - 5 mpg cyl disp hp drat wt qsec vs am gear carb 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 Set defaults for the sql chunks by using the knitr::opts_chunk$set() command knitr::opts_chunk$set(connection = &quot;con&quot;, max.print = 5) Run the same query in a new sql chunk, but without any other argument ```{sql} select * from db_mtcars ``` Table 3.3: Displaying records 1 - 5 mpg cyl disp hp drat wt qsec vs am gear carb 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 Close the database connection using dbDisconnect() dbDisconnect(con) "],
["databases-and-dplyr.html", "4 Databases and dplyr 4.1 Intro to connections 4.2 Table reference 4.3 Under the hood 4.4 Un-translated R commands 4.5 Using bang-bang", " 4 Databases and dplyr 4.1 Intro to connections Use connections to open open a database connection Load the connections package library(connections) Use connection_open() to open a Database connection con &lt;- connection_open(RSQLite::SQLite(), &quot;database/local.sqlite&quot;) The RStudio Connections pane should show the tables in the database 4.2 Table reference Use the dplyr’s tbl() command Load the dplyr package library(dplyr) Use the tbl() command to call the customer table tbl(con, &quot;customer&quot;) ## # Source: table&lt;customer&gt; [?? x 6] ## # Database: sqlite 3.29.0 [/home/edgar/bigdataclass/temp/workbook/database/local.sqlite] ## customer_id customer_name customer_phone customer_cc customer_lon customer_lat ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 Marilou Donnelly DVM 046-995-9387x9542 4054106117540070 -122. 37.8 ## 2 2 Aubrey Gulgowski III (020)136-2064 675976652024423 -122. 37.7 ## 3 3 Arlis Koss 145.574.8189 869996890406359447 -122. 37.8 ## 4 4 Duwayne Walsh 737-897-1968x235 4091991124078817 -122. 37.7 ## 5 5 Nehemiah Doyle-Schimmel (035)642-3662x356 3709535249730512 -122. 37.7 ## 6 6 Meggan Bruen 326-151-4331 4964180480255037 -122. 37.7 ## 7 7 Tracie Swift MD 776.442.3270x310 4354911637784 -122. 37.8 ## 8 8 Karrie Donnelly 883.024.5322x85341 4232403376386 -122. 37.8 ## 9 9 Kip Eichmann (619)169-8761x98047 51778482385678412 -122. 37.7 ## 10 10 Ms. Ciarra Borer 964-240-3124 4893126879913195 -122. 37.8 ## # … with more rows Add in_schema() as an argument to tbl() to specify the schema. The default schema is called: “main” tbl(con, in_schema(&quot;main&quot;, &quot;customer&quot;)) ## # Source: table&lt;main.customer&gt; [?? x 6] ## # Database: sqlite 3.29.0 [/home/edgar/bigdataclass/temp/workbook/database/local.sqlite] ## customer_id customer_name customer_phone customer_cc customer_lon customer_lat ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 Marilou Donnelly DVM 046-995-9387x9542 4054106117540070 -122. 37.8 ## 2 2 Aubrey Gulgowski III (020)136-2064 675976652024423 -122. 37.7 ## 3 3 Arlis Koss 145.574.8189 869996890406359447 -122. 37.8 ## 4 4 Duwayne Walsh 737-897-1968x235 4091991124078817 -122. 37.7 ## 5 5 Nehemiah Doyle-Schimmel (035)642-3662x356 3709535249730512 -122. 37.7 ## 6 6 Meggan Bruen 326-151-4331 4964180480255037 -122. 37.7 ## 7 7 Tracie Swift MD 776.442.3270x310 4354911637784 -122. 37.8 ## 8 8 Karrie Donnelly 883.024.5322x85341 4232403376386 -122. 37.8 ## 9 9 Kip Eichmann (619)169-8761x98047 51778482385678412 -122. 37.7 ## 10 10 Ms. Ciarra Borer 964-240-3124 4893126879913195 -122. 37.8 ## # … with more rows Load the results from the tbl() command that points to the table called order to a variable called order order &lt;- tbl(con, &quot;order&quot;) 4.3 Under the hood Use show_query() to preview the SQL statement that will be sent to the database Use show_query() to preview SQL statement that actually runs when we run order as a command show_query(order) ## &lt;SQL&gt; ## SELECT * ## FROM `order` Easily view the resulting query by adding show_query() in another piped command order %&gt;% show_query() ## &lt;SQL&gt; ## SELECT * ## FROM `order` Insert head() in between the two statements to see how the SQL changes order %&gt;% head() %&gt;% show_query() ## &lt;SQL&gt; ## SELECT * ## FROM `order` ## LIMIT 6 Use sql_render() and simulate_mssql() to see how the SQL statement changes from vendor to vendor order %&gt;% head() %&gt;% sql_render(con = simulate_mssql()) ## &lt;SQL&gt; SELECT TOP(6) * ## FROM `order` Use explain() to explore the query plan order %&gt;% head() %&gt;% explain() ## &lt;SQL&gt; ## SELECT * ## FROM `order` ## LIMIT 6 ## ## &lt;PLAN&gt; ## id parent notused detail ## 1 3 0 0 SCAN TABLE order 4.4 Un-translated R commands Review of how dbplyr handles R commands that have not been translated into a like-SQL command Preview how Sys.time() is translated order %&gt;% mutate(today = Sys.time()) %&gt;% show_query() ## &lt;SQL&gt; ## SELECT `order_id`, `customer_id`, `step_id`, Sys.time() AS `today` ## FROM `order` Use SQLite’s native commands, in this case date() order %&gt;% mutate(today = date(&#39;now&#39;)) %&gt;% show_query() ## &lt;SQL&gt; ## SELECT `order_id`, `customer_id`, `step_id`, date(&#39;now&#39;) AS `today` ## FROM `order` Run the dplyr code to confirm it works order %&gt;% mutate(today = date(&#39;now&#39;)) %&gt;% select(today) %&gt;% head() ## # Source: lazy query [?? x 1] ## # Database: sqlite 3.29.0 [/home/edgar/bigdataclass/temp/workbook/database/local.sqlite] ## today ## &lt;chr&gt; ## 1 2019-12-06 ## 2 2019-12-06 ## 3 2019-12-06 ## 4 2019-12-06 ## 5 2019-12-06 ## 6 2019-12-06 4.5 Using bang-bang Intro on passing unevaluated code to a dplyr verb Preview how Sys.time() is translated when prefixing !! order %&gt;% mutate(today = !!Sys.time()) %&gt;% show_query() ## &lt;SQL&gt; ## SELECT `order_id`, `customer_id`, `step_id`, &#39;2019-12-06T21:58:34Z&#39; AS `today` ## FROM `order` Preview how Sys.time() is translated when prefixing !! order %&gt;% mutate(today = !!Sys.time()) %&gt;% select(today) %&gt;% head() ## # Source: lazy query [?? x 1] ## # Database: sqlite 3.29.0 [/home/edgar/bigdataclass/temp/workbook/database/local.sqlite] ## today ## &lt;chr&gt; ## 1 2019-12-06T21:58:34Z ## 2 2019-12-06T21:58:34Z ## 3 2019-12-06T21:58:34Z ## 4 2019-12-06T21:58:34Z ## 5 2019-12-06T21:58:34Z ## 6 2019-12-06T21:58:34Z "],
["data-visualizations.html", "5 Data Visualizations 5.1 Simple plot 5.2 Plot in one code segment 5.3 Create a histogram 5.4 Raster plot 5.5 Using the calculate functions", " 5 Data Visualizations 5.1 Simple plot Practice pushing the calculations to the database Load the connections and dplyr libraries library(connections) library(dplyr) Use connection_open() to open a Database connection con &lt;- connection_open(RSQLite::SQLite(), &quot;database/local.sqlite&quot;) Use tbl() to create a pointer to the v_transactions table orders &lt;- tbl(con, &quot;v_orders&quot;) Use collect() bring back the aggregated results into a “pass-through” variable called by_year by_year &lt;- orders %&gt;% count(date_year) %&gt;% collect() Preview the by_year variable by_year ## # A tibble: 3 x 2 ## date_year n ## &lt;int&gt; &lt;int&gt; ## 1 2016 36283 ## 2 2017 36677 ## 3 2018 27121 Load the ggplot2 library library(ggplot2) Plot results using ggplot2 ggplot(by_year) + geom_col(aes(date_year, n)) Using the code in this section, create a single piped code set which also creates the plot orders %&gt;% count(date_year) %&gt;% collect() %&gt;% ggplot() + # &lt; Don&#39;t forget to switch to `+` geom_col(aes(date_year, n)) 5.2 Plot in one code segment Practice going from dplyr to ggplot2 without using pass-through variable, great for EDA Summarize the order totals in a new variable called: sales orders %&gt;% summarise(sales = sum(order_total)) ## Warning: Missing values are always removed in SQL. ## Use `SUM(x, na.rm = TRUE)` to silence this warning ## This warning is displayed only once per session. ## # Source: lazy query [?? x 1] ## # Database: sqlite 3.29.0 [/home/edgar/bigdataclass/temp/workbook/database/local.sqlite] ## sales ## &lt;dbl&gt; ## 1 2063264. Summarize the order totals in a new variable called: sales orders %&gt;% group_by(date_year) %&gt;% summarise(sales = sum(order_total)) ## # Source: lazy query [?? x 2] ## # Database: sqlite 3.29.0 [/home/edgar/bigdataclass/temp/workbook/database/local.sqlite] ## date_year sales ## &lt;int&gt; &lt;dbl&gt; ## 1 2016 742854. ## 2 2017 762281. ## 3 2018 558129. Summarize the order totals in a new variable called: sales orders %&gt;% group_by(date_year) %&gt;% summarise(sales = sum(order_total)) %&gt;% ggplot() + geom_col(aes(date_year, sales)) Switch the calculation to reflect the average of the order sale total orders %&gt;% group_by(date_year) %&gt;% summarise(sales = mean(order_total)) %&gt;% ggplot() + geom_col(aes(date_year, sales)) ## Warning: Missing values are always removed in SQL. ## Use `mean(x, na.rm = TRUE)` to silence this warning ## This warning is displayed only once per session. 5.3 Create a histogram Use the package’s function to easily create a histogram Load the dbplot package library(dbplot) Use the dbplot_histogram() to build the histogram orders %&gt;% dbplot_histogram(order_total) Adjust the binwidth to 300 orders %&gt;% dbplot_histogram(order_total, binwidth = 10) 5.4 Raster plot Use dbplot’s raster graph Use a dbplot_raster() to visualize order_qty versus order_total orders %&gt;% dbplot_raster(order_qty, order_total) Change the plot’s resolution to 10 orders %&gt;% dbplot_raster(order_qty, order_total, resolution = 10) 5.5 Using the calculate functions Use the db_compute_raster() function to get the underlying results that feed the plot locations &lt;- orders %&gt;% db_compute_raster2(customer_lon, customer_lat, resolution = 10) Preview the locations variable locations ## # A tibble: 58 x 5 ## customer_lon customer_lat `n()` customer_lon_2 customer_lat_2 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 -122. 37.7 1070 -122. 37.7 ## 2 -122. 37.7 2182 -122. 37.7 ## 3 -122. 37.7 4400 -122. 37.7 ## 4 -122. 37.7 4427 -122. 37.8 ## 5 -122. 37.8 2220 -122. 37.8 ## 6 -122. 37.8 2360 -122. 37.8 ## 7 -122. 37.8 1172 -122. 37.8 ## 8 -122. 37.8 1004 -122. 37.8 ## 9 -122. 37.8 2118 -122. 37.8 ## 10 -122. 37.7 2225 -122. 37.7 ## # … with 48 more rows Load the leaflet library library(leaflet) Pipe location into the leaflet() function, and then pipe that into the addTiles() function locations %&gt;% leaflet() %&gt;% addTiles() Add the addRectangles() function using the longitude and latitude variables locations %&gt;% leaflet() %&gt;% addTiles() %&gt;% addRectangles( ~customer_lon, ~customer_lat, ~customer_lon_2, ~customer_lat_2 ) Add the fillOpacity argument to the addRectangles() step, use n() as the value for it locations %&gt;% leaflet() %&gt;% addTiles() %&gt;% addRectangles( ~customer_lon, ~customer_lat, ~customer_lon_2, ~customer_lat_2, fillOpacity = ~`n()` ) Modify fillOpacity to be calculated as a percentage against the maximum number of oders locations %&gt;% leaflet() %&gt;% addTiles() %&gt;% addRectangles( ~customer_lon, ~customer_lat, ~customer_lon_2, ~customer_lat_2, fillOpacity = ~(`n()` / max(`n()`)) ) Add the popup argument with the following instruction as its value: ~paste0(&quot;&lt;p&gt;No of orders: &quot;,n(),&quot;&lt;/p&gt;&quot;) locations %&gt;% leaflet() %&gt;% addTiles() %&gt;% addRectangles( ~customer_lon, ~customer_lat, ~customer_lon_2, ~customer_lat_2, fillOpacity = ~(`n()` / max(`n()`)), popup = ~paste0(&quot;&lt;p&gt;No of orders: &quot;, `n()`,&quot;&lt;/p&gt;&quot;) ) "],
["modeling-with-databases.html", "6 Modeling with databases 6.1 Single step sampling 6.2 Multi-step sampling 6.3 Use Job panel in RStudio 6.4 Run predictions in DB 6.5 Fit model in R 6.6 Score with tidypredict 6.7 Save and reload models 6.8 Integration with tidymodels 6.9 Run models in DB 6.10 Intro to modeldb 6.11 modeldb with tidypredict", " 6 Modeling with databases 6.1 Single step sampling 6.2 Multi-step sampling 6.3 Use Job panel in RStudio 6.4 Run predictions in DB 6.5 Fit model in R 6.6 Score with tidypredict 6.7 Save and reload models 6.8 Integration with tidymodels 6.9 Run models in DB 6.10 Intro to modeldb 6.11 modeldb with tidypredict "],
["advanced-operations.html", "7 Advanced Operations 7.1 Simple wrapper function 7.2 Multiple variables 7.3 Multiple queries 7.4 Characters to field names", " 7 Advanced Operations 7.1 Simple wrapper function 7.2 Multiple variables 7.3 Multiple queries 7.4 Characters to field names "],
["intro-to-sparklyr.html", "8 Intro to sparklyr 8.1 New Spark session 8.2 Data transfer 8.3 Spark and dplyr", " 8 Intro to sparklyr 8.1 New Spark session Learn to open a new Spark session Load the sparklyr library library(sparklyr) Use spark_connect() to create a new local Spark session sc &lt;- spark_connect(master = &quot;local&quot;) ## * Using Spark: 2.4.0 Click on the Spark button to view the current Spark session’s UI Click on the Log button to see the message history 8.2 Data transfer Practice uploading data to Spark Load the dplyr library library(dplyr) Copy the mtcars dataset into the session spark_mtcars &lt;- copy_to(sc, mtcars, &quot;my_mtcars&quot;) In the Connections pane, expande the my_mtcars table Go to the Spark UI, note the new jobs In the UI, click the Storage button, note the new table Click on the In-memory table my_mtcars link 8.3 Spark and dplyr See how Spark handles dplyr commands Run the following code snipett spark_mtcars %&gt;% group_by(am) %&gt;% summarise(mpg_mean = mean(mpg, na.rm = TRUE)) ## # Source: spark&lt;?&gt; [?? x 2] ## am mpg_mean ## &lt;dbl&gt; &lt;dbl&gt; ## 1 0 17.1 ## 2 1 24.4 Go to the Spark UI and click the SQL button Click on the top item inside the Completed Queries table At the bottom of the diagram, expand Details "],
["text-mining-with-sparklyr.html", "9 Text mining with sparklyr 9.1 Data Import 9.2 Tidying data 9.3 Transform the data 9.4 Data Exploration", " 9 Text mining with sparklyr For this example, there are two files that will be analyzed. They are both the full works of Sir Arthur Conan Doyle and Mark Twain. The files were downloaded from the Gutenberg Project site via the gutenbergr package. Intentionally, no data cleanup was done to the files prior to this analysis. See the appendix below to see how the data was downloaded and prepared. readLines(&quot;books/arthur_doyle.txt&quot;, 30) ## [1] &quot;THE RETURN OF SHERLOCK HOLMES,&quot; &quot;&quot; &quot;A Collection of Holmes Adventures&quot; &quot;&quot; ## [5] &quot;&quot; &quot;by Sir Arthur Conan Doyle&quot; &quot;&quot; &quot;&quot; ## [9] &quot;&quot; &quot;&quot; &quot;CONTENTS:&quot; &quot;&quot; ## [13] &quot; The Adventure Of The Empty House&quot; &quot;&quot; &quot; The Adventure Of The Norwood Builder&quot; &quot;&quot; ## [17] &quot; The Adventure Of The Dancing Men&quot; &quot;&quot; &quot; The Adventure Of The Solitary Cyclist&quot; &quot;&quot; ## [21] &quot; The Adventure Of The Priory School&quot; &quot;&quot; &quot; The Adventure Of Black Peter&quot; &quot;&quot; ## [25] &quot; The Adventure Of Charles Augustus Milverton&quot; &quot;&quot; &quot; The Adventure Of The Six Napoleons&quot; &quot;&quot; ## [29] &quot; The Adventure Of The Three Students&quot; &quot;&quot; 9.1 Data Import Read the book data into Spark Load the sparklyr library library(sparklyr) Open a Spark session sc &lt;- spark_connect(master = &quot;local&quot;) ## Re-using existing Spark connection to local Use the spark_read_text() function to read the mark_twain.txt file, assign it to a variable called twain twain &lt;- spark_read_text(sc, &quot;twain&quot;, &quot;books/mark_twain.txt&quot;) Use the spark_read_text() function to read the arthur_doyle.txt file, assign it to a variable called doyle doyle &lt;- spark_read_text(sc, &quot;doyle&quot;, &quot;books/arthur_doyle.txt&quot;) 9.2 Tidying data Prepare the data for analysis Load the dplyr library library(dplyr) Add a column to twain named author with a value of “twain”. Assign it to a new variable called twain_id twain_id &lt;- twain %&gt;% mutate(author = &quot;twain&quot;) Add a column to doyle named author with a value of “doyle”. Assign it to a new variable called doyle_id doyle_id &lt;- doyle %&gt;% mutate(author = &quot;doyle&quot;) Use sdf_bind_rows() to append the two files together in a variable called both both &lt;- doyle_id %&gt;% sdf_bind_rows(twain_id) Preview both both ## # Source: spark&lt;?&gt; [?? x 2] ## line author ## &lt;chr&gt; &lt;chr&gt; ## 1 THE RETURN OF SHERLOCK HOLMES, doyle ## 2 &quot;&quot; doyle ## 3 A Collection of Holmes Adventures doyle ## 4 &quot;&quot; doyle ## 5 &quot;&quot; doyle ## 6 by Sir Arthur Conan Doyle doyle ## 7 &quot;&quot; doyle ## 8 &quot;&quot; doyle ## 9 &quot;&quot; doyle ## 10 &quot;&quot; doyle ## # … with more rows Filter out empty lines into a variable called all_lines all_lines &lt;- both %&gt;% filter(nchar(line) &gt; 0) Use Hive’s regexp_replace to remove punctuation, assign it to the same all_lines variable all_lines &lt;- all_lines %&gt;% mutate(line = regexp_replace(line, &quot;[_\\&quot;\\&#39;():;,.!?\\\\-]&quot;, &quot; &quot;)) 9.3 Transform the data Use feature transformers to make additional preparations Use ft_tokenizer() to separate each word. in the line. Set the output_col to “word_list”. Assign to a variable called word_list word_list &lt;- all_lines %&gt;% ft_tokenizer( input_col = &quot;line&quot;, output_col = &quot;word_list&quot; ) Remove “stop words” with the ft_stop_words_remover() transformer. Set the output_col to “wo_stop_words”. Assign to a variable called wo_stop wo_stop &lt;- word_list %&gt;% ft_stop_words_remover( input_col = &quot;word_list&quot;, output_col = &quot;wo_stop_words&quot; ) Un-nest the tokens inside wo_stop_words using explode(). Assign to a variable called exploded exploded &lt;- wo_stop %&gt;% mutate(word = explode(wo_stop_words)) Select the word and author columns, and remove any word with less than 3 characters. Assign to all_words all_words &lt;- exploded %&gt;% select(word, author) %&gt;% filter(nchar(word) &gt; 2) Cache the all_words variable using compute() all_words &lt;- all_words %&gt;% compute(&quot;all_words&quot;) 9.4 Data Exploration Used word clouds to explore the data Create a variable with the word count by author, name it word_count word_count &lt;- all_words %&gt;% count(author, word, sort = TRUE) Filter word_cout to only retain “twain”, assign it to twain_most twain_most &lt;- word_count %&gt;% filter(author == &quot;twain&quot;) Use wordcloud to visualize the top 50 words used by Twain twain_most %&gt;% head(50) %&gt;% collect() %&gt;% with(wordcloud::wordcloud( word, n, colors = c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;,&quot;#56B4E9&quot;)) ) Filter word_cout to only retain “doyle”, assign it to doyle_most doyle_most &lt;- word_count %&gt;% filter(author == &quot;doyle&quot;) Used wordcloud to visualize the top 50 words used by Doyle that have more than 5 characters doyle_most %&gt;% filter(nchar(word) &gt; 5) %&gt;% head(50) %&gt;% collect() %&gt;% with(wordcloud::wordcloud( word, n, colors = c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;,&quot;#56B4E9&quot;) )) Use anti_join() to figure out which words are used by Doyle but not Twain. Order the results by number of words. doyle_unique &lt;- doyle_most %&gt;% anti_join(twain_most, by = &quot;word&quot;) %&gt;% arrange(desc(n)) Use wordcloud to visualize top 50 records in the previous step doyle_unique %&gt;% head(50) %&gt;% collect() %&gt;% with(wordcloud::wordcloud( word, n, colors = c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;,&quot;#56B4E9&quot;)) ) Find out how many times Twain used the word “sherlock” all_words %&gt;% filter(author == &quot;twain&quot;, word == &quot;sherlock&quot;) %&gt;% tally() ## # Source: spark&lt;?&gt; [?? x 1] ## n ## &lt;dbl&gt; ## 1 47 Against the twain variable, use Hive’s instr and lower to make all ever word lower cap, and then look for “sherlock” in the line twain %&gt;% mutate(line = lower(line)) %&gt;% filter(instr(line, &quot;sherlock&quot;) &gt; 0) %&gt;% pull(line) ## [1] &quot;late sherlock holmes, and yet discernible by a member of a race charged&quot; &quot;sherlock holmes.&quot; ## [3] &quot;\\&quot;uncle sherlock! the mean luck of it!--that he should come just&quot; &quot;another trouble presented itself. \\&quot;uncle sherlock &#39;ll be wanting to talk&quot; ## [5] &quot;flint buckner&#39;s cabin in the frosty gloom. they were sherlock holmes and&quot; &quot;\\&quot;uncle sherlock&#39;s got some work to do, gentlemen, that &#39;ll keep him till&quot; ## [7] &quot;\\&quot;by george, he&#39;s just a duke, boys! three cheers for sherlock holmes,&quot; &quot;he brought sherlock holmes to the billiard-room, which was jammed with&quot; ## [9] &quot;of interest was there--sherlock holmes. the miners stood silent and&quot; &quot;the room; the chair was on it; sherlock holmes, stately, imposing,&quot; ## [11] &quot;\\&quot;you have hunted me around the world, sherlock holmes, yet god is my&quot; &quot;\\&quot;if it&#39;s only sherlock holmes that&#39;s troubling you, you needn&#39;t worry&quot; ## [13] &quot;they sighed; then one said: \\&quot;we must bring sherlock holmes. he can be&quot; &quot;i had small desire that sherlock holmes should hang for my deeds, as you&quot; ## [15] &quot;\\&quot;my name is sherlock holmes, and i have not been doing anything.\\&quot;&quot; &quot;late sherlock holmes, and yet discernible by a member of a race charged&quot; ## [17] &quot;plus fort que sherlock holmes&quot; &quot;sherlock holmes entre en scene&quot; ## [19] &quot;sherlock holmes&quot; &quot;--l&#39;oncle sherlock! quelle guigne!&quot; ## [21] &quot;bien! cette fois sherlock sera tres embarrasse; il manquera de preuve et&quot; &quot;--l&#39;oncle sherlock va vouloir, ce soir, causer avec moi de notre&quot; ## [23] &quot;passage etroit sur la chambre de sherlock holmes; ils s&#39;y embusquerent&quot; &quot;d&#39;archy, il ne peut etre nullement compare au genie de sherlock holmes,&quot; ## [25] &quot;flint buckner. c&#39;etait sherlock holmes et son neveu.&quot; &quot;--messieurs, mon oncle sherlock a un travail pressant a faire qui le&quot; ## [27] &quot;--mes amis! trois vivats a sherlock holmes, le plus grand homme qui ait&quot; &quot;mettaient de coeur a leur reception. arrive dans sa chambre, sherlock&quot; ## [29] &quot;il introduisit sherlock holmes dans la salle de billard qui etait comble&quot; &quot;de mineurs, tous impatients de le voir arriver. sherlock commanda les&quot; ## [31] &quot;sherlock holmes. les mineurs se tenaient en demi-cercle en observant un&quot; &quot;sherlock au milieu de nous? dit ferguson.&quot; ## [33] &quot;arracher; quand sherlock y met la main, il faut qu&#39;ils parlent, qu&#39;ils&quot; &quot;plus complexe; sherlock va pouvoir etaler devant nous son art et sa&quot; ## [35] &quot;regardant comment sherlock procede. mais non, au lieu de cela, il a&quot; &quot;sherlock holmes etait assis sur cette chaise, l&#39;air grave, imposant et&quot; ## [37] &quot;sherlock holmes leva la main pour concentrer sur lui l&#39;attention du&quot; &quot;pas baisse pavillon devant sherlock holmes.\\&quot; la serenite de ce dernier&quot; ## [39] &quot;objets, il y a une heure a peine pendant que maitre sherlock holmes se&quot; &quot;sherlock regardait avec la volonte bien arretee de conserver son&quot; ## [41] &quot;silence complet qui suivit, maitre sherlock prit la parole, disant avec&quot; &quot;--vous m&#39;avez pourchasse dans tout l&#39;univers, sherlock holmes, et&quot; ## [43] &quot;--si c&#39;est uniquement sherlock holmes qui vous inquiete, inutile de vous&quot; &quot;\\&quot;elles soupirerent, puis l&#39;une dit: \\&quot;il faut que nous amenions sherlock&quot; ## [45] &quot;d&#39;assister de sang-froid a la pendaison de sherlock holmes. j&#39;avais&quot; &quot;--je m&#39;appelle sherlock holmes; je n&#39;ai rien a me reprocher.&quot; ## [47] &quot;plus fort que sherlock holmes&quot; Close Spark session spark_disconnect(sc) Most of these lines are in a short story by Mark Twain called A Double Barrelled Detective Story. As per the Wikipedia page about this story, this is a satire by Twain on the mystery novel genre, published in 1902. "],
["spark-data-caching.html", "10 Spark data caching 10.1 Map data 10.2 Caching data", " 10 Spark data caching 10.1 Map data See the machanics of how Spark is able to use files as a data source Examine the contents of the files folder Load the sparklyr library library(sparklyr) Use spark_connect() to create a new local Spark session sc &lt;- spark_connect(master = &quot;local&quot;) ## * Using Spark: 2.4.0 Load the readr and purrr libraries library(readr) ## ## Attaching package: &#39;readr&#39; ## The following objects are masked from &#39;package:vroom&#39;: ## ## as.col_spec, col_character, col_date, col_datetime, col_double, col_factor, col_guess, col_integer, col_logical, col_number, col_skip, col_time, cols, cols_condense, cols_only, date_names, ## date_names_lang, date_names_langs, default_locale, fwf_cols, fwf_empty, fwf_positions, fwf_widths, locale, output_column, spec library(purrr) Read the top 5 rows of the transactions_1 CSV file top_rows &lt;- read_csv(&quot;files/transactions_1.csv&quot;, n_max = 5) ## Parsed with column specification: ## cols( ## order_id = col_double(), ## customer_id = col_double(), ## customer_name = col_character(), ## customer_phone = col_character(), ## customer_cc = col_double(), ## customer_lon = col_double(), ## customer_lat = col_double(), ## date = col_date(format = &quot;&quot;), ## date_year = col_double(), ## date_month = col_double(), ## date_month_name = col_character(), ## date_day = col_character(), ## product_id = col_double(), ## price = col_double() ## ) Create a list based on the column names, and add a list item with “character” as its value. Name the variable file_columns file_columns &lt;- top_rows %&gt;% rename_all(tolower) %&gt;% map(function(x) &quot;character&quot;) Preview the contents of the file_columns variable head(file_columns) ## $order_id ## [1] &quot;character&quot; ## ## $customer_id ## [1] &quot;character&quot; ## ## $customer_name ## [1] &quot;character&quot; ## ## $customer_phone ## [1] &quot;character&quot; ## ## $customer_cc ## [1] &quot;character&quot; ## ## $customer_lon ## [1] &quot;character&quot; Use spark_read() to “map” the file’s structure and location to the Spark context. Assign it to the spark_lineitems variable spark_lineitems &lt;- spark_read_csv( sc, name = &quot;orders&quot;, path = &quot;files&quot;, memory = FALSE, columns = file_columns, infer_schema = FALSE ) In the Connections pane, click on the table icon by the transactions variable Verify that the new variable pointer works by using tally() spark_lineitems %&gt;% tally() ## # Source: spark&lt;?&gt; [?? x 1] ## n ## &lt;dbl&gt; ## 1 250000 10.2 Caching data Learn how to cache a subset of the data in Spark Create a subset of the orders table object. Summarize by date, careate a total price and number of items sold. daily_orders &lt;- spark_lineitems %&gt;% mutate(price = as.double(price)) %&gt;% group_by(date) %&gt;% summarise(total_sales = sum(price, na.rm = TRUE), no_items = n()) Use compute() to extract the data into Spark memory cached_orders &lt;- compute(daily_orders, &quot;daily&quot;) Confirm new variable pointer works head(cached_orders) ## # Source: spark&lt;?&gt; [?? x 3] ## date total_sales no_items ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2017-10-17 2071. 298 ## 2 2017-10-23 1799. 269 ## 3 2017-10-26 2027. 301 ## 4 2017-10-27 2057. 303 ## 5 2017-10-29 1849. 272 ## 6 2017-11-04 1813. 271 Go to the Spark UI Click the Storage button Notice that “orders” is now cached into Spark memory "]
]
